generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// ------------ COMMON TYPES --------------

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
}

enum EduLevel {
  UNDERGRADUATE
  MASTER
  DOCTOR
}

enum PostStatus {
  ONGOING
  END
}

// ------------ COMMON TYPES --------------

/// ------------ MAIN MODEL ---------------

model Applicant {
  id               String             @id @default(uuid())
  phoneNumber      String             @unique
  address          String
  firstName        String
  lastName         String
  profileSummary   String?
  cv_file          Bytes?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  Skill            Skill[]
  Education        Education[]
  Experience       Experience[]
  Interested_Field Interested_Field[]
  JobSaved         JobSaved[]
  JobApplied       JobApplied[]
}

model Skill {
  id             String          @id @default(uuid())
  applicantId    String
  skillName      String
  description    String?
  certificate    String
  expertiseLevel ExpertiseLevel?
  yearOfExp      Int?
  monthOfExp     Int?
  applicant      Applicant       @relation(fields: [applicantId], references: [id])
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
}

model Education {
  id          String        @id @default(uuid())
  applicantId String
  uniName     String
  uniLink     String?
  edu_start   DateTime?
  edu_end     DateTime?
  major       String
  eduLevel    EduLevel
  moreInfo    String?
  achievement Achievement[]
  applicant   Applicant     @relation(fields: [applicantId], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
}

model Experience {
  id                String        @id @default(uuid())
  applicantId       String
  companyName       String
  companyLink       String?
  position          String
  work_start        DateTime
  work_end          DateTime
  jobResponsibility String?
  moreInfo          String?
  achievement       Achievement[]
  applicant         Applicant     @relation(fields: [applicantId], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
}

model Achievement {
  id           String      @id @default(uuid())
  experienceId String?
  educationId  String?
  title        String
  description  String
  role         String?
  time         DateTime?
  Experience   Experience? @relation(fields: [experienceId], references: [id])
  Education    Education?  @relation(fields: [educationId], references: [id])
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now())
}

model Field {
  id               String             @id @default(uuid())
  name             String
  Interested_Field Interested_Field[]
  JobCategory      JobCategory[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
}

model Interested_Field {
  fieldId     String
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  field       Field     @relation(fields: [fieldId], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  @@id([fieldId, applicantId])
}

model JobPost {
  id                   String       @id @default(uuid())
  companyId            String //ref
  jobCategoryId        String?
  jobTypeId            String
  title                String
  description          String?
  position             String
  workingAddress       String
  educationRequirement String
  skillRequirement     String
  responsibility       String
  salary_start         Decimal
  salary_end           Decimal
  currency             String
  status               PostStatus   @default(ONGOING)
  apply_until          DateTime
  created_at           DateTime     @default(now())
  updated_at           DateTime     @default(now())
  JobType              JobType      @relation(fields: [jobTypeId], references: [id])
  JobCategory          JobCategory? @relation(fields: [jobCategoryId], references: [id])
  JobSaved             JobSaved[]
  JobApplied           JobApplied[]
}

model JobType {
  id         String    @id @default(uuid())
  name       String
  JobPost    JobPost[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
}

model JobCategory {
  id         String    @id @default(uuid())
  fieldId    String?
  name       String
  JobPost    JobPost[]
  Field      Field?    @relation(fields: [fieldId], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
}

model JobSaved {
  id          String    @id @default(uuid())
  jobpostId   String
  applicantId String
  JobPost     JobPost   @relation(fields: [jobpostId], references: [id])
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model JobApplied {
  id            String       @id @default(uuid())
  jobpostId     String
  applicantId   String
  applicationId String?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now())
  JobPost       JobPost      @relation(fields: [jobpostId], references: [id])
  applicant     Applicant    @relation(fields: [applicantId], references: [id])
  Application   Application? @relation(fields: [applicationId], references: [id])
}

model Application {
  id         String       @id @default(uuid())
  cv         String
  status     String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  appliedJob JobApplied[]
}
