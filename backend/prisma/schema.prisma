generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// ------------ COMMON TYPES --------------
enum Role {
  APPLICANT
  COMPANY
  ADMIN
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
}

enum EduLevel {
  BACHELOR
  MASTER
  DOCTOR
}

enum CertType {
  DIPLOMA
  CERTIFICATE
  PROFESSIONAL_LISENSE
  PROFESSIONAL_CERTIFICATION
}

enum PostStatus {
  OPENING
  TERMINATED
  CANCELLED
  NOT_EXIST
}

enum AppliedStatus {
  PENDING
  FAILURE
  SUCCESS
  NOT_EXIST
}

enum ChangeTypes {
  INSERT
  UPDATE
  DELETE
}

enum NotificationStatus {
  UNREAD
  READ
  DISMISSED
}

enum ReactionType {
  LIKE
  LOVE
  IDEA
  SAD
  WOW
}

enum ContentType {
  TEXT
  IMAGE
}

enum GenderType {
  MALE
  FEMALE
}

enum FileType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

enum UserStatusType {
  ONLINE
  OFFLINE
  AWAY
}

enum UserAccountStatus {
  ACTIVE
  LOCKED
  BANNED
}

enum AdminApprovalStatus {
  PENDING // Chưa duyệt
  APPROVED // Đã duyệt
  REJECTED // Bị từ chối
}

// ------------ COMMON TYPES --------------

/// ------------ MAIN MODEL ---------------

model User {
  id               String             @id @default(uuid())
  applicantId      String?
  companyId        String?
  username         String             @unique @db.VarChar(30)
  password         String             @db.VarChar(255)
  email            String             @unique @db.VarChar(320)
  phoneNumber      String?            @unique @db.VarChar(15)
  avatar           String?
  background       String?
  role             Role
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Company          Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Applicant        Applicant?         @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  User_History     User_History[]
  Notification     Notification[]
  reviewsWritten   Review[]           @relation(name: "UserReviews")
  reviewsReceived  Review[]           @relation(name: "ReviewedUserReviews")
  following        Follower[]         @relation(name: "UserFollow")
  followers        Follower[]         @relation(name: "UserFollowed")
  Comment          Comment[]
  Reaction         Reaction[]
  user_token       user_token[]
  Message          Message[]
  ConversationUser ConversationUser[]
  UserStatus       UserStatus[]
  status           UserAccountStatus  @default(ACTIVE)
}

model Applicant {
  id              String               @id @default(uuid())
  address         String //ref
  firstName       String               @db.VarChar(50)
  lastName        String               @db.VarChar(50)
  profileSummary  String?              @db.VarChar(1000)
  gender          GenderType?
  trustScore      Float                @default(0)
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  Skill           Skill[]
  Edu             ApplicantEducation[]
  Exp             Experience[]
  InterestedField InterestedField[]
  JobSaved        JobSaved[]
  JobApplied      JobApplied[]
  User            User[]
  CV              CV[]
}

model Skill {
  id             String          @id @default(uuid())
  applicantId    String
  skillName      String          @db.VarChar(255)
  description    String?         @db.VarChar(1000)
  certificate    String //file / byte
  expertiseLevel ExpertiseLevel?
  yearOfExp      Int?            @db.SmallInt
  monthOfExp     Int?            @db.SmallInt
  applicant      Applicant       @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model Education {
  id                 String               @id @default(uuid())
  uniName            String               @unique @db.VarChar(255)
  description        String?              @db.VarChar(1000)
  uniLink            String?
  address            String //ref
  ApplicantEducation ApplicantEducation[]
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
}

model ApplicantEducation {
  id          String        @id @default(uuid())
  eduId       String
  applicantId String
  edu_start   DateTime?
  edu_end     DateTime?
  major       String        @db.VarChar(255)
  eduLevel    EduLevel
  moreInfo    String?       @db.VarChar(1000)
  achievement Achievement[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  education   Education     @relation(fields: [eduId], references: [id])
  applicant   Applicant     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Experience {
  id                String        @id @default(uuid())
  applicantId       String
  companyName       String
  companyLink       String?
  position          String        @db.VarChar(255)
  work_start        DateTime?
  work_end          DateTime?
  jobResponsibility String        @db.VarChar(1000)
  moreInfo          String?       @db.VarChar(1000)
  achievement       Achievement[]
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  applicant         Applicant     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Achievement {
  id                   String              @id @default(uuid())
  experienceId         String?
  applicantEducationId String?
  title                String              @db.VarChar(255)
  description          String              @db.VarChar(1000)
  role                 String?             @db.VarChar(255)
  time                 DateTime?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  ApplicantEducation   ApplicantEducation? @relation(fields: [applicantEducationId], references: [id])
  Experience           Experience?         @relation(fields: [experienceId], references: [id])
}

model Field {
  id               String            @id @default(uuid())
  name             String            @db.VarChar(255)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  Interested_Field InterestedField[]
  JobCategory      JobCategory[]
}

model InterestedField {
  fieldId     String
  applicantId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  field       Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@id([fieldId, applicantId])
}

// ? 1 jobpost co nen co nhieu jobtype va category
model JobPost {
  id                   String              @id @default(uuid())
  companyId            String //ref
  jobCategoryId        String?
  jobTypeId            String
  title                String              @db.VarChar(255)
  description          String?             @db.VarChar(1000)
  location             String              @default("Unknown") @db.VarChar(255) //dùng cho thành phố
  position             String              @db.VarChar(255)
  workingAddress       String //địa chỉ làm việc cụ thể, có thể là địa chỉ công ty hoặc địa điểm làm việc từ xa      
  educationRequirement String              @db.VarChar(1000)
  skillRequirement     String              @db.VarChar(1000)
  responsibility       String
  salary_start         Decimal             @db.Decimal(10, 2)
  salary_end           Decimal             @db.Decimal(10, 2)
  currency             String              @db.VarChar(10)
  status               PostStatus?         @default(OPENING)
  apply_until          DateTime
  JobApplied           JobApplied[]
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  Company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  JobType              JobType             @relation(fields: [jobTypeId], references: [id], onDelete: Cascade)
  JobCategory          JobCategory?        @relation(fields: [jobCategoryId], references: [id], onDelete: SetNull)
  JobSaved             JobSaved[]
  approvalStatus       AdminApprovalStatus @default(PENDING)
}

model JobType {
  id         String    @id @default(uuid())
  name       String    @unique @db.VarChar(20)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  JobPost    JobPost[]
}

model JobCategory {
  id         String    @id @default(uuid())
  fieldId    String?
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Field      Field?    @relation(fields: [fieldId], references: [id], onDelete: SetNull)
  JobPost    JobPost[]

  @@unique([name, fieldId])
}

model JobSaved {
  jobpostId   String
  applicantId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  JobPost     JobPost   @relation(fields: [jobpostId], references: [id])
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@id([jobpostId, applicantId])
}

model JobApplied {
  id          String        @id @default(uuid())
  jobpostId   String
  applicantId String
  cvId        String?
  status      AppliedStatus @default(PENDING)
  apply_at    DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  JobPost     JobPost       @relation(fields: [jobpostId], references: [id])
  applicant   Applicant     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  CV          CV?           @relation(fields: [cvId], references: [id])
}

model CV {
  id          String       @id @default(uuid())
  applicantId String
  Applicant   Applicant    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  title       String
  filePath    String
  size        Int // bytes
  viewCount   Int          @db.SmallInt
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  appliedJob  JobApplied[]
}

model Company {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(255)
  description     String?   @db.VarChar(1000)
  taxcode         String?   @unique
  establishedYear Int?
  Post            Post[]
  User            User[]
  JobPost         JobPost[]
}

model User_History {
  id         String      @id @default(uuid())
  userId     String
  changeType ChangeTypes
  oldValue   String?     @db.Text
  newValue   String?     @db.Text
  User       User        @relation(fields: [userId], references: [id])
  changedAt  DateTime
}

model user_token {
  id         String   @id @default(uuid())
  user_id    String
  fcm_token  String   @unique
  updated_at DateTime @updatedAt
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Notification {
  id         String             @id @default(uuid())
  title      String             @db.VarChar(255)
  userId     String
  message    String
  status     NotificationStatus
  created_at DateTime           @default(now())
  User       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(uuid())
  userId          String
  reviewed_userId String
  detail          String   @db.Text
  rating          Int      @default(1)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id], name: "UserReviews")
  reviewUser      User     @relation(fields: [reviewed_userId], references: [id], name: "ReviewedUserReviews")
}

model Follower {
  followId     String
  followedId   String
  followUser   User   @relation(fields: [followId], references: [id], name: "UserFollow")
  followedUser User   @relation(fields: [followedId], references: [id], name: "UserFollowed")

  @@id([followId, followedId])
}

model Comment {
  id            String    @id @default(uuid())
  userId        String
  postId        String
  CommentId     String?
  CommentDetail String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id])
  Post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("ParentChild", fields: [CommentId], references: [id], onDelete: Cascade)
  childComment  Comment[] @relation("ParentChild")
}

model Post {
  id             String              @id @default(uuid())
  companyId      String
  title          String
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
  Company        Company             @relation(fields: [companyId], references: [id])
  contents       PostContent[]
  Reaction       Reaction[]
  Comment        Comment[]
  approvalStatus AdminApprovalStatus @default(PENDING)
}

model PostContent {
  id     String      @id @default(uuid())
  postId String
  type   ContentType
  value  String
  order  Int // tách theo đoạn
  Post   Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Reaction {
  postId       String
  userId       String
  reactionType ReactionType
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  Post         Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

// name: tên của đoạn chat nhóm, nếu ko thì FE tự lấy tên của đối phương để hiện thị
model Conversation {
  id         String              @id @default(uuid())
  name       String?             @db.VarChar(255)
  isGroup    Boolean             @default(false)
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt
  Message    Message[]
  members    ConversationUser[]
  labels     ConversationLabel[]
}

// nếu là admin thì có thể thực hiện các thao tác: đổi tên đoạn chat, thêm / xóa thành viên, trao quyền admin
model ConversationUser {
  conversationId    String
  userId            String
  isAdmin           Boolean      @default(false)
  allowNotification Boolean      @default(true)
  joined_at         DateTime     @default(now())
  left_at           DateTime?
  deleted_at        DateTime?
  updated_at        DateTime     @updatedAt
  Conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  sent_at        DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  isRead         Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  isEdited       Boolean      @default(false)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  Sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  attachments    Attachment[]
}

model Attachment {
  id          String   @id @default(uuid())
  messageId   String
  filePath    String
  fileType    FileType
  uploaded_at DateTime @default(now())
  Message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model ConversationLabel {
  id             String       @id @default(uuid())
  conversationId String
  label          String       @db.VarChar(50) // Ví dụ: "Quan trọng", "Công việc"
  created_at     DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model UserStatus {
  userId        String         @id
  status        UserStatusType @default(OFFLINE)
  lastActive_at DateTime?
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Report {
  id             String              @id @default(uuid())
  userId         String
  reportedUserId String? // Nếu báo cáo người dùng
  postId         String? // Nếu báo cáo Post
  jobPostId      String? // Nếu báo cáo JobPost
  reason         String              @db.VarChar(1000)
  status         AdminApprovalStatus @default(PENDING)
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
}

model DailyStatistic {
  id               String   @id @default(uuid())
  date             DateTime @unique // Ngày thống kê (lấy ở mốc 00:00:00)
  userCount        Int      @default(0) // Tổng số user tại ngày đó
  jobPostCount     Int      @default(0) // Tổng số JobPost tại ngày đó
  reportCount      Int      @default(0) // Tổng số Report (khiếu nại) tại ngày đó
  applicationCount Int      @default(0) // Tổng số đơn ứng tuyển tại ngày đó
  created_at       DateTime @default(now()) // Thời gian ghi nhận bản ghi
  updated_at       DateTime @updatedAt // Thời gian cập nhật cuối cùng
}
