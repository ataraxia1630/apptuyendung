generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// ------------ COMMON TYPES --------------
enum Role {
  APPLICANT
  COMPANY
  ADMIN
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
}

enum EduLevel {
  BACHELOR
  MASTER
  DOCTOR
}

enum CertType {
  DIPLOMA
  CERTIFICATE
  PROFESSIONAL_LISENSE
  PROFESSIONAL_CERTIFICATION
}

enum PostStatus {
  OPENING
  TERMINATED
  CANCELLED
  NOT_EXIST
}

enum AppliedStatus {
  PENDING
  FAILURE
  SUCCESS
  NOT_EXIST
}

enum ChangeTypes {
  INSERT
  UPDATE
  DELETE
}

enum NotificationStatus {
  UNREAD
  READ
  DISMISSED
}

enum ReactionType {
  LIKE
  LOVE
  IDEA
  SAD
  WOW
}

// ------------ COMMON TYPES --------------

/// ------------ MAIN MODEL ---------------

model User {
  id              String         @id @default(uuid())
  applicantId     String?
  companyId       String?
  username        String         @unique @db.VarChar(30)
  password        String         @db.VarChar(255)
  email           String         @unique @db.VarChar(320)
  phoneNumber     String?        @unique @db.VarChar(15)
  avatar          String?
  background      String?
  role            Role
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  Company         Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Applicant       Applicant?     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  User_History    User_History[]
  Notification    Notification[]
  reviewsWritten  Review[]       @relation(name: "UserReviews")
  reviewsReceived Review[]       @relation(name: "ReviewedUserReviews")
  following       Follower[]     @relation(name: "UserFollow")
  followers       Follower[]     @relation(name: "UserFollowed")
  Comment         Comment[]
  Reaction        Reaction[]
}

model Applicant {
  id              String               @id @default(uuid())
  address         String //ref
  firstName       String               @db.VarChar(50)
  lastName        String               @db.VarChar(50)
  profileSummary  String?              @db.VarChar(1000)
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  Skill           Skill[]
  Edu             ApplicantEducation[]
  Exp             Experience[]
  InterestedField InterestedField[]
  JobSaved        JobSaved[]
  JobApplied      JobApplied[]
  User            User[]
  CV              CV[]
}

model Skill {
  id             String          @id @default(uuid())
  applicantId    String
  skillName      String          @db.VarChar(255)
  description    String?         @db.VarChar(1000)
  certificate    String //file / byte
  expertiseLevel ExpertiseLevel?
  yearOfExp      Int?            @db.SmallInt
  monthOfExp     Int?            @db.SmallInt
  applicant      Applicant       @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model Education {
  id                 String               @id @default(uuid())
  uniName            String               @unique @db.VarChar(255)
  description        String?              @db.VarChar(1000)
  uniLink            String?
  address            String //ref
  ApplicantEducation ApplicantEducation[]
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
}

model ApplicantEducation {
  id          String        @id @default(uuid())
  eduId       String
  applicantId String
  edu_start   DateTime?
  edu_end     DateTime?
  major       String        @db.VarChar(255)
  eduLevel    EduLevel
  moreInfo    String?       @db.VarChar(1000)
  achievement Achievement[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  education   Education     @relation(fields: [eduId], references: [id])
  applicant   Applicant     @relation(fields: [applicantId], references: [id])
}

model Experience {
  id                String        @id @default(uuid())
  applicantId       String
  companyName       String
  companyLink       String?
  position          String        @db.VarChar(255)
  work_start        DateTime?
  work_end          DateTime?
  jobResponsibility String        @db.VarChar(1000)
  moreInfo          String?       @db.VarChar(1000)
  achievement       Achievement[]
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  applicant         Applicant     @relation(fields: [applicantId], references: [id])
}

model Achievement {
  id                   String              @id @default(uuid())
  experienceId         String?
  applicantEducationId String?
  title                String              @db.VarChar(255)
  description          String              @db.VarChar(1000)
  role                 String?             @db.VarChar(255)
  time                 DateTime?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  ApplicantEducation   ApplicantEducation? @relation(fields: [applicantEducationId], references: [id])
  Experience           Experience?         @relation(fields: [experienceId], references: [id])
}

model Field {
  id               String            @id @default(uuid())
  name             String            @db.VarChar(255)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  Interested_Field InterestedField[]
  JobCategory      JobCategory[]
}

model InterestedField {
  fieldId     String
  applicantId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  field       Field     @relation(fields: [fieldId], references: [id])

  @@id([fieldId, applicantId])
}

// ? 1 jobpost co nen co nhieu jobtype va category
model JobPost {
  id                   String       @id @default(uuid())
  companyId            String
  jobCategoryId        String?
  jobTypeId            String
  title                String       @db.VarChar(255)
  description          String?      @db.VarChar(1000)
  position             String       @db.VarChar(255)
  workingAddress       String //ref
  educationRequirement String       @db.VarChar(1000)
  skillRequirement     String       @db.VarChar(1000)
  responsibility       String
  salary_start         Decimal      @db.Decimal(10, 2)
  salary_end           Decimal      @db.Decimal(10, 2)
  currency             String       @db.VarChar(10)
  status               PostStatus   @default(OPENING)
  apply_until          DateTime
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  Company              Company      @relation(fields: [companyId], references: [id])
  JobType              JobType      @relation(fields: [jobTypeId], references: [id])
  JobCategory          JobCategory? @relation(fields: [jobCategoryId], references: [id])
  JobSaved             JobSaved[]
  JobApplied           JobApplied[]
}

model JobType {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(20)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  JobPost    JobPost[]
}

model JobCategory {
  id         String    @id @default(uuid())
  fieldId    String?
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Field      Field?    @relation(fields: [fieldId], references: [id])
  JobPost    JobPost[]
}

model JobSaved {
  id          String    @id @default(uuid())
  jobpostId   String
  applicantId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  JobPost     JobPost   @relation(fields: [jobpostId], references: [id])
  applicant   Applicant @relation(fields: [applicantId], references: [id])
}

model JobApplied {
  id          String        @id @default(uuid())
  jobpostId   String
  applicantId String
  cvId        String?
  status      AppliedStatus @default(PENDING)
  apply_at    DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  JobPost     JobPost       @relation(fields: [jobpostId], references: [id])
  applicant   Applicant     @relation(fields: [applicantId], references: [id])
  CV          CV?           @relation(fields: [cvId], references: [id])
}

model CV {
  id          String       @id @default(uuid())
  applicantId String
  Applicant   Applicant    @relation(fields: [applicantId], references: [id])
  title       String
  filePath    String
  viewCount   Int          @db.SmallInt
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  appliedJob  JobApplied[]
}

model Company {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(255)
  description     String?   @db.VarChar(1000)
  taxcode         String?
  establishedYear DateTime?
  Post            Post[]
  User            User[]
  JobPost         JobPost[]
}

model User_History {
  id         String      @id @default(uuid())
  userId     String
  changeType ChangeTypes
  oldValue   String?     @db.Text
  newValue   String?     @db.Text
  User       User        @relation(fields: [userId], references: [id])
  changedAt  DateTime
}

model Notification {
  id         String             @id @default(uuid())
  title      String             @db.VarChar(255)
  userId     String
  message    String
  status     NotificationStatus
  created_at DateTime           @default(now())
  User       User               @relation(fields: [userId], references: [id])
}

model Review {
  id              String   @id @default(uuid())
  userId          String
  reviewed_userId String
  detail          String   @db.Text
  rating          Int      @default(1)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id], name: "UserReviews")
  reviewUser      User     @relation(fields: [reviewed_userId], references: [id], name: "ReviewedUserReviews")
}

model Follower {
  followId     String
  followedId   String
  followUser   User   @relation(fields: [followId], references: [id], name: "UserFollow")
  followedUser User   @relation(fields: [followedId], references: [id], name: "UserFollowed")

  @@id([followId, followedId])
}

model Comment {
  id            String    @id @default(uuid())
  userId        String
  postId        String
  CommentId     String?
  CommentDetail String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id])
  Post          Post      @relation(fields: [postId], references: [id])
  parentComment Comment?  @relation("ParentChild", fields: [CommentId], references: [id])
  childComment  Comment[] @relation("ParentChild")
}

model Post {
  id         String     @id @default(uuid())
  companyId  String
  title      String     @db.VarChar(255)
  detail     String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Company    Company    @relation(fields: [companyId], references: [id])
  Image      Image[]
  Reaction   Reaction[]
  Comment    Comment[]
}

model Image {
  id     String @id @default(uuid())
  postId String
  url    String @db.VarChar(255)
  type   String @db.VarChar(50)
  size   Int
  Post   Post   @relation(fields: [postId], references: [id])
}

model Reaction {
  postId       String
  userId       String
  reactionType ReactionType
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  Post         Post         @relation(fields: [postId], references: [id])
  User         User         @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}
